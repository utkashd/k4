#!/bin/bash
# shellcheck disable=SC2059

########################################################################################
# If you don't include the above "shellcheck disable..." then you get a few of these
# from shellcheck (pre-commit step):
#    In shmake line 21:
#        printf "${RED}$1${END_COLOR}\n"
#               ^----------------------^ SC2059 (info): Don't use variables in the 
#                                                       printf format string. Use 
#                                                       printf '..%s..' "$foo".
########################################################################################

set -euo pipefail
# What this does: https://gist.github.com/mohanpedala/1e2ff5661761d3abd0385e8223e16425

########################################################################################
# Utilities
########################################################################################

_printlnRed() {
    RED='\033[0;31m'
    END_COLOR='\033[0m'
    printf "${RED}$1${END_COLOR}\n"
}
_printRed() {
    RED='\033[0;31m'
    END_COLOR='\033[0m'
    printf "${RED}$1${END_COLOR}"
}

_printlnYellow() {
    YELLOW='\033[1;33m'
    END_COLOR='\033[0m'
    printf "${YELLOW}$1${END_COLOR}\n"
}
_printYellow() {
    YELLOW='\033[1;33m'
    END_COLOR='\033[0m'
    printf "${YELLOW}$1${END_COLOR}"
}

_printlnGreen() {
    GREEN='\033[0;32m'
    END_COLOR='\033[0m'
    printf "${GREEN}$1${END_COLOR}\n"
}
_printGreen() {
    GREEN='\033[0;32m'
    END_COLOR='\033[0m'
    printf "${GREEN}$1${END_COLOR}"
}

K4_REPO_ROOT="$(dirname "$(realpath "$0")")" # assumes this script is in the root directory of this repository

########################################################################################
# Recipes
########################################################################################

startDockerDesktop() {
    printf "\tEnsuring Docker Desktop is running...\n"
    if ! docker info > /dev/null 2>&1 ; then # if docker is not running
        _printlnYellow "\tDocker Desktop not running. Starting it now."
        _printlnYellow "\tIf a Docker Desktop window opens, you can close it."
        open /Applications/Docker.app
        while ! docker stats --no-stream > /dev/null 2>&1 ; do # while docker isn't yet running
            printf "\tWaiting for Docker Desktop to start...\n"
            sleep 1
        done
    fi
    _printlnGreen "\tDocker Desktop is running."
}

buildAndRunApplication() {
    printf "\tBuilding and running the application...\n"

    OLD_BACKEND_IMAGE_ID_ELSE_EMPTY_STRING="$(docker image ls --format json | jq -rs --arg name "k4-backend" '.[] | select(.Repository == $name) | .ID')"
    OLD_FRONTEND_IMAGE_ID_ELSE_EMPTY_STRING="$(docker image ls --format json | jq -rs --arg name "k4-frontend" '.[] | select(.Repository == $name) | .ID')"

    set -x
    K4_ENVIRONMENT=development \
        docker compose --project-directory "${K4_REPO_ROOT}" up --build -d
    { set +x; } 2>/dev/null # normally `set +x` is printed. this is `set +x` but doesn't get printed

    _removeOldDanglingImageIfExists "k4-backend" "$OLD_BACKEND_IMAGE_ID_ELSE_EMPTY_STRING"
    _removeOldDanglingImageIfExists "k4-frontend" "$OLD_FRONTEND_IMAGE_ID_ELSE_EMPTY_STRING"

    _printlnGreen "\tApplication is running."
}

buildAndRunBackendAndPostgres() {
    printf "\tBuilding and running the backend + postgres...\n"

    OLD_BACKEND_IMAGE_ID_ELSE_EMPTY_STRING="$(docker image ls --format json | jq -rs --arg name "k4-backend" '.[] | select(.Repository == $name) | .ID')"

    set -x
    K4_ENVIRONMENT=development \
        docker compose --project-directory "${K4_REPO_ROOT}" up backend postgres --build -d
    { set +x; } 2>/dev/null # normally `set +x` is printed. this is `set +x` but doesn't get printed

    _removeOldDanglingImageIfExists "k4-backend" "$OLD_BACKEND_IMAGE_ID_ELSE_EMPTY_STRING"

    _printlnGreen "\tApplication is running."
}

buildAndRunFrontend() {
    printf "\tBuilding and running the frontend...\n"

    OLD_BACKEND_IMAGE_ID_ELSE_EMPTY_STRING="$(docker image ls --format json | jq -rs --arg name "k4-backend" '.[] | select(.Repository == $name) | .ID')"

    set -x
    K4_ENVIRONMENT=development \
        docker compose --project-directory "${K4_REPO_ROOT}" up frontend postgres --build -d
    { set +x; } 2>/dev/null # normally `set +x` is printed. this is `set +x` but doesn't get printed

    _removeOldDanglingImageIfExists "k4-backend" "$OLD_BACKEND_IMAGE_ID_ELSE_EMPTY_STRING"

    _printlnGreen "\tApplication is running."
}

_removeOldDanglingImageIfExists() {

    local image_name="$1"
    local old_image_id_else_empty_string="$2"

    NEW_IMAGE_ID="$(docker image ls --format json | jq -rs --arg name "$image_name" '.[] | select(.Repository == $name) | .ID')"
    if [ -n "${old_image_id_else_empty_string}" ] ; then
        if [ "${old_image_id_else_empty_string}" != "${NEW_IMAGE_ID}" ] ; then
            _printlnYellow "\tFYI: Deleting the old dangling image (${image_name})."
            set -x
            docker image rm "${old_image_id_else_empty_string}"
            { set +x; } 2>/dev/null # normally `set +x` is printed. this is `set +x` but doesn't get printed
        fi
    fi
}

buildForPersonalProduction() {
    set -x
    K4_ENVIRONMENT=production \
        DOCKER_DEFAULT_PLATFORM=linux/amd64 \
        docker compose --project-directory "${K4_REPO_ROOT}" build
    { set +x; } 2>/dev/null # normally `set +x` is printed. this is `set +x` but doesn't get printed

    _printlnYellow "You'll need to manually delete any dangling images"
}

startDev() {
    startDockerDesktop
    buildAndRunApplication
    _printlnGreen "All set! Ready to use the app at http://localhost:5173, http://localhost:8000/docs 😎"
}

startDevBackendPostgres() {
    startDockerDesktop
    buildAndRunBackendAndPostgres
    _printlnGreen "All set! Ready to use the backend at http://localhost:8000/docs 😎"
}

startDevOnHostMachine() {
    startDockerDesktop

    K4_ENVIRONMENT=development docker compose up postgres -d

    screen -c local_dev.screen
}

getShellToContainerPostgres() {

    _printlnGreen "********************"

    printf "Get in with:\n"
    _printYellow "root@abcdefghijkl:/# "
    _printlnGreen "psql -U postgres"

    printf "\nConnect to the database: \n"
    _printYellow "postgres=# "
    _printlnGreen "\c postgres"

    printf "\nShow tables: \n"
    _printYellow "postgres=# "
    _printlnGreen "\d"

    printf "\nExample query: \n"
    _printYellow "postgres=# "
    _printlnGreen "select * from users limit 5;"

    printf "\nUse "
    _printYellow "exit"
    printf " to, uh, exit.\n"

    _printlnGreen "********************"

    set -x
    docker exec -it k4-postgres bash
    { set +x; } 2>/dev/null # normally `set +x` is printed. this is `set +x` but doesn't get printed
}

stopDev() {
    if docker stats --no-stream > /dev/null 2>&1 ; then # if docker is running
        printf "Stopping the containers.\n"
        set -x
        K4_ENVIRONMENT=development docker compose stop
        { set +x; } 2>/dev/null # normally `set +x` is printed. this is `set +x` but doesn't get printed

        _printlnGreen "Containers have been stopped."
    fi
    _printlnGreen "All set! Ready to chill 😎"
}

stopAndQuitDockerDesktop() {
    stopDev
    if docker stats --no-stream > /dev/null 2>&1 ; then # if docker is running
        printf "Quitting Docker Desktop...\n"
        set -x
        osascript -e 'quit app "Docker Desktop"'
        { set +x; } 2>/dev/null # normally `set +x` is printed. this is `set +x` but doesn't get printed
    fi
    _printlnGreen "Docker Desktop has (probably) been quitted."
}

########################################################################################
# Usage
########################################################################################

usage() {
    echo "Usage: smake [dev|devBackend|getShellToContainerPostgres|stop|stopAndQuitDockerDesktop|buildPersonal|startDevOnHostMachine]" 1>&2
    exit 1
}

########################################################################################
# Exposed recipes
########################################################################################

if [[ $# -eq 0 ]] ; then
    usage
fi

for arg in "$@"; do
    case $arg in
        --help)
            usage
            ;;
        -h)
            usage
            ;;
        help)
            usage
            ;;
        h)
            usage
            ;;
        dev)
            startDev
            ;;
        devBackend)
            startDevBackendPostgres
            ;;
        getShellToContainerPostgres)
            getShellToContainerPostgres
            ;;
        stop)
            stopDev
            _printlnYellow "FYI: Did not quit Docker Desktop. Do that with:"
            _printlnYellow ""
            _printlnYellow "smake stopAndQuitDockerDesktop"
            ;;
        stopAndQuitDockerDesktop)
            stopAndQuitDockerDesktop
            ;;
        buildPersonal)
            buildForPersonalProduction
            ;;
        startDevOnHostMachine)
            startDevOnHostMachine
            ;;
        *)
            echo "Unknown option: $arg" >&2
            usage
            ;;
    esac
done
